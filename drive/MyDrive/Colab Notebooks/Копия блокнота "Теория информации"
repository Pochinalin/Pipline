{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-i0CckxDQ5sbbi1bmtnhmGE0-3KWPYws","timestamp":1734108159997}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# @title Задание 2. Шрифт Цезаря.       | Не трогать код!!!\n","# @markdown Впишите свое слово и индекс смещения в следующей ячейке при вызове функции\n","\n","ru_alphabet = alphabet = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', '_']\n","\n","def caesar_cipher(text, shift):\n","    result = ''\n","    for char in text:\n","        if char == 'Ё':\n","          char = 'Е'\n","        if char == 'Ъ':\n","          char = 'Ь'\n","        if char.upper() in ru_alphabet:\n","            index = ru_alphabet.index(char.upper())\n","            shifted_index = (index + shift) % len(ru_alphabet)\n","            shifted_char = ru_alphabet[shifted_index]\n","            if char.islower():\n","              shifted_char = shifted_char.lower()\n","            result += shifted_char\n","        else:\n","            result += char\n","    return result"],"metadata":{"id":"N27DEnVRLCHp","executionInfo":{"status":"ok","timestamp":1735291349511,"user_tz":-180,"elapsed":714,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["ceasar_name = caesar_cipher('ПЕТЕНИН_МАТВЕЙ', 5)\n","print(ceasar_name)\n"],"metadata":{"id":"T3Dg12GjLGFp","executionInfo":{"status":"ok","timestamp":1735291367504,"user_tz":-180,"elapsed":809,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1fd30eb6-2327-4fdf-c5a0-2e1d29f12eae"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["ФКЧКТНТДСЕЧЗКО\n"]}]},{"cell_type":"code","source":["# @title Задание 3. Кодирование матрицей Виженера. | Не трогать код!!!\n","# @markdown Просто запустите следующее деление\n","def create_vigenere_matrix():\n","    # Определяем ось X и Y\n","    axis = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н',\n","            'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ы', 'Ь',\n","            'Э', 'Ю', 'Я', '_']\n","\n","    # Внутренний порядок для первой строки\n","    base_row = ['Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж',\n","                'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г',\n","                'Х', 'С', 'Ф', 'Л', 'Ч', 'У']\n","\n","    # Создаём матрицу Виженера\n","    matrix = []\n","    for i in range(len(base_row)):\n","        matrix.append(base_row[i:] + base_row[:i])  # Циклический сдвиг строки влево\n","    print(matrix)\n","    return axis, matrix\n","\n","\n","\n","\n","def encrypt_vigenere(text, key):\n","    axis, matrix = create_vigenere_matrix()\n","    encrypted_text = \"\"\n","    key_index = 0\n","\n","    for char in text:\n","        if char == 'Ё':\n","          char = 'Е'\n","        if char == 'Ъ':\n","          char = 'Ь'\n","        if char not in axis:\n","            encrypted_text += char  # Пропускаем символы вне алфавита\n","            continue\n","\n","        # Индексы символа из текста и ключа\n","        text_idx = axis.index(char)\n","        key_char = key[key_index % len(key)]\n","        key_idx = axis.index(key_char)\n","\n","        # Зашифрованный символ из матрицы\n","        encrypted_char = matrix[key_idx][text_idx]\n","        encrypted_text += encrypted_char\n","\n","        # Переход к следующему символу ключа\n","        key_index += 1\n","\n","    return encrypted_text"],"metadata":{"id":"e9K8Vcf1NmnT","executionInfo":{"status":"ok","timestamp":1735291380593,"user_tz":-180,"elapsed":259,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["vigenere_name = encrypt_vigenere(ceasar_name, 'ЗАЧЕТ')\n","print(vigenere_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"un3d2BonOBW-","executionInfo":{"status":"ok","timestamp":1735291385359,"user_tz":-180,"elapsed":259,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"outputId":"f37c1872-222a-4fc8-d532-548fd94397cf"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[['Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У'], ['О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р'], ['А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О'], ['_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А'], ['К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_'], ['В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К'], ['Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В'], ['Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц'], ['Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш'], ['Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ'], ['М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б'], ['Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М'], ['Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н'], ['Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы'], ['Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж'], ['Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е'], ['Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д'], ['Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь'], ['П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э'], ['Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П'], ['З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й'], ['И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З'], ['Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И'], ['Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т'], ['Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю'], ['Г', 'Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я'], ['Х', 'С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г'], ['С', 'Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х'], ['Ф', 'Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С'], ['Л', 'Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф'], ['Ч', 'У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л'], ['У', 'Р', 'О', 'А', '_', 'К', 'В', 'Ц', 'Ш', 'Щ', 'Б', 'М', 'Н', 'Ы', 'Ж', 'Е', 'Д', 'Ь', 'Э', 'П', 'Й', 'З', 'И', 'Т', 'Ю', 'Я', 'Г', 'Х', 'С', 'Ф', 'Л', 'Ч']]\n","СМЕДКЗПСТЮЧШОЙ\n"]}]},{"cell_type":"code","source":["# @title Задание 4. Кодирование слова кодом Хаффмена. | Не трогать код!!!\n","# @markdown Просто запустите следующее деление\n","def huffman_encode(text):\n","    huffman_code = {\n","        '_': '101',\n","        'А': '1111',\n","        'Б': '000001',\n","        'В': '10001',\n","        'Г': '010001',\n","        'Д': '01001',\n","        'Е': '1101',\n","        'Ё': '1101',\n","        'Ж': '0000001',\n","        'З': '110000',\n","        'И': '1110',\n","        'Й': '1000001',\n","        'К': '00011',\n","        'Л': '11001',\n","        'М': '00001',\n","        'Н': '0010',\n","        'О': '011',\n","        'П': '100101',\n","        'Р': '10011',\n","        'С': '0101',\n","        'Т': '0011',\n","        'У': '100100',\n","        'Ф': '100000000',\n","        'Х': '0001001',\n","        'Ц': '00010001',\n","        'Ч': '010000',\n","        'Ш': '10000001',\n","        'Щ': '00010000',\n","        'Ъ': '000101',\n","        'Ь': '000101',\n","        'Ы': '110001',\n","        'Э': '100000001',\n","        'Ю': '0000000',\n","        'Я': '100001',\n","    }\n","\n","    encoded_text = ''\n","    for char in text:\n","        char = char.upper()  # Convert to uppercase for consistency\n","        if char in huffman_code:\n","            encoded_text += huffman_code[char] + \" \"\n","        else:\n","            # Handle characters not in the mapping (e.g., punctuation)\n","            encoded_text += char +  \" \"  # Or raise an exception, or skip the character\n","\n","    return encoded_text"],"metadata":{"id":"lUtjfMwOQ92z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["huffman_name = huffman_encode(vigenere_name)\n","print(huffman_name)"],"metadata":{"id":"n1eqJeiVQ_Bz","executionInfo":{"status":"ok","timestamp":1734376242333,"user_tz":-180,"elapsed":230,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5ba921a7-e163-439e-ef1b-81afe9658ac5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["101 0010 00010001 010000 010001 100101 100100 110000 00011 00010000 100101 110001 110001 0000001 10000001 \n"]}]},{"cell_type":"code","source":["# @title Задание 5. Рассчет энтропии объединения | Не трогать код!!!\n","#  В процессе разработки\n","\n","from fractions import Fraction\n","from math import gcd\n","from functools import reduce\n","from collections import Counter\n","import math\n","\n","\n","# Матрица условных вероятностей\n","prob_matrix = [\n","    [Fraction(0.50), Fraction(0.00), Fraction(0.125), Fraction(0.125), Fraction(0.125), Fraction(0.125)],\n","    [Fraction(0.125), Fraction(0.25), Fraction(0.125), Fraction(0.25), Fraction(0.125), Fraction(0.125)],\n","    [Fraction(0.25), Fraction(0.25), Fraction(0.00), Fraction(0.25), Fraction(0.125), Fraction(0.125)],\n","    [Fraction(0.00), Fraction(0.125), Fraction(0.25), Fraction(0.125), Fraction(0.25), Fraction(0.25)],\n","]\n","\n","\n","\n","\n","\n","def multiplyMatrix(values, matrix=prob_matrix):\n","# Умножаем каждую строку на соответствующее значение x\n","  result_matrix = []\n","  for x, row in zip(x_values, matrix):\n","      result_row = [x * y for y in row]\n","      result_matrix.append(result_row)\n","  return result_matrix\n","\n","# Функция для нахождения общего знаменателя\n","def lcm(a, b):\n","    \"\"\"Наименьшее общее кратное двух чисел.\"\"\"\n","    return a * b // gcd(a, b)\n","\n","def find_common_denominator(matrix):\n","    \"\"\"Находим общий знаменатель для всех дробей в матрице.\"\"\"\n","    denominators = [frac.denominator for row in matrix for frac in row]\n","    return reduce(lcm, denominators)\n","\n","def convert_to_common_denominator(matrix, common_denominator):\n","    \"\"\"Приводим все дроби в матрице к общему знаменателю.\"\"\"\n","    new_matrix = []\n","    for row in matrix:\n","      new_row = []\n","      for frac in row:\n","        new_row.append(f'{frac.numerator * (common_denominator // frac.denominator)}/{common_denominator}')\n","\n","      new_matrix.append(new_row)\n","    return new_matrix\n","\n","def strMatrixToFrac(matrix):\n","  new_matrix1 = []\n","  for row in matrix:\n","    new_row1 = []\n","    for frac in row:\n","      frac_top_int = int(frac.split('/')[0])\n","      frac_bottom_int = int(frac.split('/')[1])\n","      new_row1.append(Fraction(frac_top_int, frac_bottom_int))\n","    new_matrix1.append(new_row1)\n","\n","  return new_matrix1\n","\n","\n","def findEnthropy(new_matrix1):\n","\n","  # Преобразуем матрицу в список\n","  flat_matrix = [elem for row in new_matrix1 for elem in row]\n","  # Считаем количество каждой уникальной дроби\n","  fraction_counts = Counter(flat_matrix)\n","\n","  # Вычисляем сумму дробь * ln(дробь) * количество\n","  result = 0\n","  for frac, count in fraction_counts.items():\n","      print(f\"{frac}: {count}\")\n","      value = float(frac)  # Преобразуем дробь в число\n","      if value > 0:  # Логарифм от нуля не существует\n","          term = (value * math.log2(value) * count)  # Дробь * её логарифм * количество\n","          print(term)\n","\n","          result += term  # Добавляем к итоговой сумме\n","\n","  return result * -1\n","\n","\n","def calcEnthropy(values, matrix=prob_matrix):\n","    multiplied_matrix = multiplyMatrix(values)\n","    common_denominator = find_common_denominator(multiplied_matrix)\n","    converted_matrix = convert_to_common_denominator(multiplied_matrix, common_denominator)\n","    frac_matrix = strMatrixToFrac(converted_matrix)\n","    enthropy = findEnthropy(frac_matrix)\n","    return converted_matrix, enthropy\n","\n","\n","\n"],"metadata":{"id":"Y3LgKCrTAFiu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Значения для x1, x2, x3, x4\n","x_values = [Fraction(0.125), Fraction(0.25), Fraction(0.375), Fraction(0.25)]\n","\n","result_matrix_common, enthropy = calcEnthropy(x_values)\n","# Выводим результирующую матрицу\n","print(\"Приведенная матрица с общим знаменателем:\")\n","for row in result_matrix_common:\n","    print([str(frac) for frac in row])\n","\n","print(f\"\\nИтоговый результат: {enthropy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X-qkZfMjXSGz","executionInfo":{"status":"ok","timestamp":1734377832698,"user_tz":-180,"elapsed":248,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"outputId":"cd3445ea-ce9e-4eb6-9354-e577d137a70d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/16: 6\n","-1.5\n","0: 3\n","1/64: 4\n","-0.375\n","1/32: 6\n","-0.9375\n","3/32: 3\n","-0.9604792966721749\n","3/64: 2\n","-0.4139097655573916\n","Приведенная матрица с общим знаменателем:\n","['4/64', '0/64', '1/64', '1/64', '1/64', '1/64']\n","['2/64', '4/64', '2/64', '4/64', '2/64', '2/64']\n","['6/64', '6/64', '0/64', '6/64', '3/64', '3/64']\n","['0/64', '2/64', '4/64', '2/64', '4/64', '4/64']\n","\n","Итоговый результат: 4.186889062229567\n"]}]},{"cell_type":"code","source":["# @title Задание 6. ИКМ Преобразование\n","# @markdown По сути, вам нужно только подставить в объект значения которые у вас есть, остально он посчитает сам, но не факт, я с другими не проверял)))\n","\n","import numpy as np\n","\n","def calc_params(data):\n","    # Переменные, которые нужно вычислить\n","    required_keys = ['T', 'ΔF', 'n', 'r', 'B_c', 'B_otsch', 'N']\n","\n","    # Инициализируем отсутствующие ключи значением None\n","    for key in required_keys:\n","        if key not in data:\n","            data[key] = None\n","\n","    # Контрольный флаг для отслеживания изменений\n","    previous_data = data.copy()\n","\n","    while None in data.values():  # Пока есть неопределённые значения\n","        # Проверяем и вычисляем по цепочке зависимостей\n","        if data['T'] is None and data['ΔF'] is not None:\n","            data['T'] = 1 / (2 * data['ΔF'])\n","            print(\"/n 1\")\n","\n","        if data['T'] is None and data['B_otsch'] is not None:\n","            data['T'] = 1 / (data['B_otsch'] / 1000)\n","            recalculated = True\n","            print('рофл')\n","\n","        if data['ΔF'] is None and data['T'] is not None:\n","            data['ΔF'] = 1 / (2 * data['T'])\n","            print(\"/n 2\")\n","\n","        if data['n'] is None and data['N'] is not None:\n","            data['n'] = np.log2(data['N'])\n","            print(\"/n 3\")\n","\n","        if data['r'] is None and data['B_c'] is not None:\n","            data['r'] = (1 / (data['B_c']*1000))*10**6\n","            print(\"/n 4\")\n","\n","        if data['B_c'] is None and data['n'] is not None and data['B_otsch'] is not None:\n","            data['B_c'] = data['n'] * data['B_otsch'] /1000\n","            print(\"/n 5\")\n","\n","        if data['B_otsch'] is None and data['T'] is not None:\n","            data['B_otsch'] = 1 / (data['T'] ) * 1000\n","            print(\"/n 6\")\n","\n","        if data['N'] is None and data['n'] is not None:\n","            data['N'] = 2**data['n']\n","            print(\"/n 7\")\n","\n","        # Проверяем, изменились ли данные за итерацию\n","        if data == previous_data:  # Если нет изменений, выходим из цикла\n","            print(\"Не удалось вычислить все параметры. Проверьте входные данные.\")\n","            break\n","\n","        previous_data = data.copy()\n","\n","    return data"],"metadata":{"id":"3RRJuMwQK8-o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["real_data = {\n","        \"ΔF\": None,   # кГц\n","        \"T\": 0.5,    # мс\n","        \"B_otsch\": None,  # отсч/с\n","        \"N\": 64,    # уровни квантования\n","        \"n\": None,    # разрядность квантования\n","        \"B_c\":  None,  # кбит/с\n","        \"r\":  None,    # мкс\n","    }\n","\n","res = calc_params(real_data)\n","print(res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oyGWWlcQR6R4","executionInfo":{"status":"ok","timestamp":1734377980983,"user_tz":-180,"elapsed":235,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"outputId":"0a77c773-d7de-4d6c-83bd-fc893d3701a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/n 2\n","/n 3\n","/n 6\n","/n 5\n","/n 4\n","{'ΔF': 1.0, 'T': 0.5, 'B_otsch': 2000.0, 'N': 64, 'n': 6.0, 'B_c': 12.0, 'r': 83.33333333333333}\n"]}]},{"cell_type":"code","source":["# @title Задание 7. Арифметическое кодирование\n","# @markdown Просто впишите свое слово в следующее деление и получите результат\n","current_probabilities = {\n","    '_' : {\n","        'probability' : 0.2,\n","        'Zl' : 0,\n","        'Zh' : 0.20\n","    },\n","    'Т' : {\n","        'probability' : 0.2,\n","        'Zl' : 0.20,\n","        'Zh' : 0.40\n","    },\n","    'А' : {\n","        'probability' : 0.15,\n","        'Zl' : 0.40,\n","        'Zh' : 0.55\n","    },\n","    'К' : {\n","        'probability' : 0.15,\n","        'Zl' : 0.55,\n","        'Zh' : 0.70\n","    },\n","    'С' : {\n","        'probability' : 0.10,\n","        'Zl' : 0.70,\n","        'Zh' : 0.80\n","    },\n","    'М' : {\n","        'probability' : 0.05,\n","        'Zl' : 0.80,\n","        'Zh' : 0.85\n","    },\n","    'О' : {\n","        'probability' : 0.05,\n","        'Zl' : 0.85,\n","        'Zh' : 0.90\n","    },\n","    'Е' : {\n","        'probability' : 0.05,\n","        'Zl' : 0.90,\n","        'Zh' : 0.95\n","    },\n","    'Ь' : {\n","        'probability' : 0.05,\n","        'Zl' : 0.95,\n","        'Zh' : 1\n","    },\n","\n","}\n","new_matrix = []\n","def letter_areth_code(word, i=0, y=1, x=0):\n","\n","  if i >= len(word):\n","    return\n","\n","  word.upper()\n","  new_y = x + (y - x)*current_probabilities[word[i]]['Zh']\n","  new_x = x + (y - x)*current_probabilities[word[i]]['Zl']\n","  new_matrix.append([new_x, new_y])\n","  print(f'Буква: {word[i]}, x{i+1} = {new_x}, y{i+1} = {new_y}')\n","\n","  letter_areth_code (word, i+1, new_y, new_x)\n"],"metadata":{"id":"F5a_Ffsnzovk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["letter_areth_code('ТЕС_')\n","print(new_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1JCXci8l-yKn","executionInfo":{"status":"ok","timestamp":1734378021378,"user_tz":-180,"elapsed":253,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"outputId":"a6ea7c66-8154-431b-ba44-bedb01ed010a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Буква: Т, x1 = 0.2, y1 = 0.4\n","Буква: Е, x2 = 0.38, y2 = 0.39\n","Буква: С, x3 = 0.387, y3 = 0.388\n","Буква: _, x4 = 0.387, y4 = 0.3872\n","[[0.2, 0.4], [0.38, 0.39], [0.387, 0.388], [0.387, 0.3872]]\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","target = 0.33088\n","n = 17\n","N = 2**n\n","tolerance = 0.00001 # Допустимое отклонение от целевого значения\n","\n","best_sequence = None\n","min_diff = float('inf')\n","\n","for signs in itertools.product([-1, 1], repeat=n - 1):\n","    sequence = [1]\n","    for i in range(n - 1):\n","        next_val = sequence[-1] * 2 + signs[i]\n","        sequence.append(next_val)\n","\n","    result = sequence[-1] / N\n","    diff = abs(result - target)\n","\n","    if diff < min_diff and diff < tolerance:\n","      min_diff = diff\n","      best_sequence = sequence\n","\n","if best_sequence:\n","    print(\"Найденная последовательность:\")\n","    for i in range(n):\n","        print(f\"{i+1}\\t{best_sequence[i]}\\t{2**(i+1)}\\t{best_sequence[i]/2**(i+1)}\")\n","else:\n","    print(f\"Последовательность, удовлетворяющая условию ({tolerance}), не найдена.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ln4Y0y4dELVo","executionInfo":{"status":"ok","timestamp":1734375120180,"user_tz":-180,"elapsed":517,"user":{"displayName":"Ilia Pochinalin","userId":"02017416450237833019"}},"outputId":"a7ee78dd-80a2-4f64-933b-43c9134d51a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Найденная последовательность:\n","1\t1\t2\t0.5\n","2\t1\t4\t0.25\n","3\t3\t8\t0.375\n","4\t5\t16\t0.3125\n","5\t11\t32\t0.34375\n","6\t21\t64\t0.328125\n","7\t43\t128\t0.3359375\n","8\t85\t256\t0.33203125\n","9\t169\t512\t0.330078125\n","10\t339\t1024\t0.3310546875\n","11\t677\t2048\t0.33056640625\n","12\t1355\t4096\t0.330810546875\n","13\t2711\t8192\t0.3309326171875\n","14\t5421\t16384\t0.33087158203125\n","15\t10843\t32768\t0.330902099609375\n","16\t21685\t65536\t0.3308868408203125\n","17\t43369\t131072\t0.33087921142578125\n"]}]}]}